server:
  port: ${SERVER_PORT:8080}
  error:
    include-stacktrace: ${ERROR_STACKTRACE:always}
    include-message: ${ERROR_MESSAGE:always}

spring:
  application:
    name: readingtrace
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  output:
    ansi:
      enabled: ${ANSI_ENABLED:always}
  datasource:
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/readingtrace?useUnicode=true&characterEncoding=UTF-8}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:root}
  jpa:
    show-sql: ${JPA_SHOW_SQL:true}
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: ${JPA_FORMAT_SQL:true}
        use_sql_comments: ${JPA_SQL_COMMENTS:true}
        generate_statistics: ${JPA_STATISTICS:true}
  devtools:
    restart:
      enabled: ${DEVTOOLS_RESTART:true}
    livereload:
      enabled: ${DEVTOOLS_LIVERELOAD:true}
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  ai:
    chat:
      client:
        enabled: false
    openai:
      api-key: ${OPENAI_API_KEY}
    google:
      genai:
        api-key: ${GOOGLE_GENAI_API_KEY}
        chat:
          options:
            model: gemini-2.0-flash

#TODO: choose either configuration or class definition
#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            client-id: <your_client_id>
#            client-secret: <your_client_secret>
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"

#actuator
management:
  endpoints:
    web:
      base-path: ${ACTUATOR_BASE_PATH:/actuator}
      exposure:
        include: ${ACTUATOR_ENDPOINTS:*}
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:always}
    env:
      show-values: ${ACTUATOR_SHOW_VALUES:always}
  security:
    enabled: ${ACTUATOR_SECURITY:false}

logging:
  level:
    root: ${ROOT_LOG_LEVEL:INFO}
    org.springframework.security:  ${SECURITY_LOG_LEVEL:TRACE}
    org.hibernate.SQL: ${HIBERNATE_SQL_LOG:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${HIBERNATE_PARAM_LOG:TRACE}
    org.springframework.web: ${WEB_LOG_LEVEL:DEBUG}
    org.springframework.transaction: ${TRANSACTION_LOG_LEVEL:DEBUG}
    com.yurakim.readingtrace: ${APP_LOG_LEVEL:DEBUG}
    org.springframework.web.socket: ${WEBSOCKET_LOG_LEVEL:DEBUG}
    org.springframework.messaging.simp: ${SIMPLE_LOG_LEVEL:DEBUG}
  file:
    name: ${LOG_FILE:}
  pattern:
    console: ${CONSOLE_LOG_PATTERN:%clr(%d{HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}
    file: ${LOG_PATTERN:%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n}

jwt:
  issuer: readingtrace
  expiration-hours: 12
  access-expiration-minutes: 15
  refresh-expiration-days: 7

frontend:
  url: http://localhost:5173
cors:
  allowed-origins: ${frontend.url}